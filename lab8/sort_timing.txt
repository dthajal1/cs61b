Q: Is one sorting algorithm always faster than another?
A: Timing.CountingSorter and Timing.javaSorter are always faster than timing.BubbleSorter, timing.InsertionSorter and timing.BubbleSorter.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: They all are growing at the same rate but with different constants.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: From asymptotical bounds, we can only get their family curves but if they are the same, we can't differentiate which one is faster and with empirical analysis, we can do exactly that.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: Yes, because it has to sort more elements.

Q: How does changing nrepeats change the plot?
A: The data are inconsistent.

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: They have the similar growth rate but the values are sometimes inconsistent.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: